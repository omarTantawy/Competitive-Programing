session #13 : Graphs 2
    dfs and bfs applications
        -tree is connected graph with N nodes and N-1 edges
        -ancestors of node x
        -is y ancestor of x
        - in-time  while dfs , out-time while dfs to get ancestors
        - is ancestor if in[x] <= in[y] && in[y] <= out[x]
        - get all nodes under x node
        - DAG -> directed acyclyc graph
        - topological sorting : flip graph edges , save answer of visited vertex
        - detect cycles using dfs and bfs
        - directed -> keep current nodes stack and check if visited one of them again || use edge and if visited 1 edge more than once then cycle
        - undirected is always have cycles , but if we defined cycles as path > 2, so check if node != parent